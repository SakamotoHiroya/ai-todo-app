// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// CreateTask implements createTask operation.
	//
	// Create a new task.
	//
	// POST /api/tasks
	CreateTask(ctx context.Context, req *TaskInput) (*Task, error)
	// DeleteTask implements deleteTask operation.
	//
	// Delete a task.
	//
	// DELETE /api/tasks/{id}
	DeleteTask(ctx context.Context, params DeleteTaskParams) error
	// GetTasks implements getTasks operation.
	//
	// Get list of tasks.
	//
	// GET /api/tasks
	GetTasks(ctx context.Context) ([]Task, error)
	// GoogleAuthCallback implements googleAuthCallback operation.
	//
	// Google Authentication Callback.
	//
	// GET /api/auth/google/callback
	GoogleAuthCallback(ctx context.Context) (GoogleAuthCallbackRes, error)
	// Logout implements logout operation.
	//
	// Logout.
	//
	// POST /api/auth/logout
	Logout(ctx context.Context) error
	// StartGoogleAuth implements startGoogleAuth operation.
	//
	// Start Google Authentication.
	//
	// GET /api/auth/google
	StartGoogleAuth(ctx context.Context) error
	// ToggleTaskCompletion implements toggleTaskCompletion operation.
	//
	// Toggle task completion state.
	//
	// PATCH /api/tasks/{id}/toggle
	ToggleTaskCompletion(ctx context.Context, params ToggleTaskCompletionParams) (*Task, error)
	// UpdateTask implements updateTask operation.
	//
	// Update an existing task.
	//
	// PUT /api/tasks/{id}
	UpdateTask(ctx context.Context, req *TaskInput, params UpdateTaskParams) (*Task, error)
	// NewError creates *ErrorResponseStatusCode from error returned by handler.
	//
	// Used for common default response.
	NewError(ctx context.Context, err error) *ErrorResponseStatusCode
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
