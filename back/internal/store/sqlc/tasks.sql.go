// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: tasks.sql

package sqlc

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createTask = `-- name: CreateTask :one
INSERT INTO tasks (
    user_id,
    title,
    description,
    due_date,
    priority
) VALUES (
    $1, $2, $3, $4, $5
)
RETURNING id, user_id, title, description, due_date, priority, is_completed, created_at, updated_at
`

type CreateTaskParams struct {
	UserID      int64              `json:"userId"`
	Title       string             `json:"title"`
	Description pgtype.Text        `json:"description"`
	DueDate     pgtype.Timestamptz `json:"dueDate"`
	Priority    int16              `json:"priority"`
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, createTask,
		arg.UserID,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.Priority,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.DueDate,
		&i.Priority,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteTask = `-- name: DeleteTask :exec
DELETE FROM tasks
WHERE id = $1 AND user_id = $2
`

type DeleteTaskParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"userId"`
}

func (q *Queries) DeleteTask(ctx context.Context, arg DeleteTaskParams) error {
	_, err := q.db.Exec(ctx, deleteTask, arg.ID, arg.UserID)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, user_id, title, description, due_date, priority, is_completed, created_at, updated_at FROM tasks
WHERE id = $1 AND user_id = $2
`

type GetTaskParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"userId"`
}

func (q *Queries) GetTask(ctx context.Context, arg GetTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, getTask, arg.ID, arg.UserID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.DueDate,
		&i.Priority,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, user_id, title, description, due_date, priority, is_completed, created_at, updated_at FROM tasks
WHERE user_id = $1
    AND (CASE WHEN $4::boolean IS NOT NULL 
         THEN is_completed = $4 
         ELSE true END)
    AND (CASE WHEN $5::smallint IS NOT NULL 
         THEN priority = $5 
         ELSE true END)
ORDER BY
    CASE WHEN $6::text = 'due_date' THEN due_date END ASC,
    CASE WHEN $6::text = 'priority' THEN priority END DESC,
    CASE WHEN $6::text = 'created_at' OR $6::text IS NULL THEN created_at END DESC
LIMIT $2
OFFSET $3
`

type ListTasksParams struct {
	UserID    int64  `json:"userId"`
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
	Completed bool   `json:"completed"`
	Priority  int16  `json:"priority"`
	Sort      string `json:"sort"`
}

func (q *Queries) ListTasks(ctx context.Context, arg ListTasksParams) ([]Task, error) {
	rows, err := q.db.Query(ctx, listTasks,
		arg.UserID,
		arg.Limit,
		arg.Offset,
		arg.Completed,
		arg.Priority,
		arg.Sort,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Title,
			&i.Description,
			&i.DueDate,
			&i.Priority,
			&i.IsCompleted,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const toggleTaskCompletion = `-- name: ToggleTaskCompletion :one
UPDATE tasks
SET
    is_completed = NOT is_completed,
    updated_at = CURRENT_TIMESTAMP
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, title, description, due_date, priority, is_completed, created_at, updated_at
`

type ToggleTaskCompletionParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"userId"`
}

func (q *Queries) ToggleTaskCompletion(ctx context.Context, arg ToggleTaskCompletionParams) (Task, error) {
	row := q.db.QueryRow(ctx, toggleTaskCompletion, arg.ID, arg.UserID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.DueDate,
		&i.Priority,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateTask = `-- name: UpdateTask :one
UPDATE tasks
SET
    title = COALESCE($1, title),
    description = COALESCE($2, description),
    due_date = COALESCE($3, due_date),
    priority = COALESCE($4, priority),
    updated_at = CURRENT_TIMESTAMP
WHERE id = $5 AND user_id = $6
RETURNING id, user_id, title, description, due_date, priority, is_completed, created_at, updated_at
`

type UpdateTaskParams struct {
	Title       pgtype.Text        `json:"title"`
	Description pgtype.Text        `json:"description"`
	DueDate     pgtype.Timestamptz `json:"dueDate"`
	Priority    pgtype.Int2        `json:"priority"`
	ID          int64              `json:"id"`
	UserID      int64              `json:"userId"`
}

func (q *Queries) UpdateTask(ctx context.Context, arg UpdateTaskParams) (Task, error) {
	row := q.db.QueryRow(ctx, updateTask,
		arg.Title,
		arg.Description,
		arg.DueDate,
		arg.Priority,
		arg.ID,
		arg.UserID,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Title,
		&i.Description,
		&i.DueDate,
		&i.Priority,
		&i.IsCompleted,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
